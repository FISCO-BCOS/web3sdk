#!/usr/bin/env bash
# arg1: java packege name
LANG=zh_CN.UTF-8
##############################################################################
##
##  evidence start up script for UN*X
##
##############################################################################

# @function: output log with red color (error log)
# @param: content: error message
function LOG_ERROR()
{
    local content=${1}
    echo -e "\033[31m"${content}"\033[0m"
}

# @function: output information log
# @param: content: information message
function LOG_INFO()
{
    local content=${1}
    echo -e "\033[32m"${content}"\033[0m"
}

# @function: execute command
# @params: 1. command: command to be executed
function execute_cmd()
{
    local command="${1}"
    eval "${command}"
    local ret=$?
    if [ $ret -ne 0 ];then
        LOG_ERROR "execute command ${command} FAILED"
        exit 1
    fi
    return 0
}

function Usage() {
    LOG_INFO "###### SystemContract TOOLS(please refer to https://fisco-bcos-test.readthedocs.io/zh/latest/docs/web3sdk/advanced/index.html)"
    LOG_INFO "--Deploy system contract: \n\t./web3sdk InitSystemContract\n"
    LOG_INFO "--Get system contract routers: \n\t./web3sdk SystemProxy\n"
    LOG_INFO "--Manager leaders: \n\t./web3sdk NodeAction all|registerNode|cancelNode\n"
    LOG_INFO "--Manager black-list of certificates : \n\t./web3sdk CAAction all|add|remove\n"
    LOG_INFO "--Manager system params of FISCO-BCOS blockchain: \n\t./web3sdk ConfigAction get|set\n"
    LOG_INFO "--ConsensusControl: \n\t./web3sdk ConsensusControl deploy|turnoff|list\n"
    LOG_INFO "--CNS tools: \n\t./web3sdk CNSAction add|update|get|list|historylist|reset\n"
    LOG_INFO "\n"
    LOG_INFO "###### Web3j API (please refer to https://fisco-bcos-test.readthedocs.io/zh/latest/docs/web3sdk/advanced/web3sdk_api.html)"
    
    LOG_INFO "--Obtain version of web3j: \n\t./web3sdk web3_clientVersion\n"
    LOG_INFO "--Obtain account: \n\t./web3sdk eth_accounts\n"
    LOG_INFO "--Obtain current block number: \n\t./web3sdk eth_blockNumber\n"
    LOG_INFO "--Obtain current pbft view: \n\t./web3sdk eth_pbftView\n"
    LOG_INFO "--Obtain binary code of specified contract: \n\t./web3sdk eth_getCode address blockNumber\n"
    LOG_INFO "--Get transaction according to transaction hash: \n\t./web3sdk eth_getBlockTransactionCountByHash blockHash\n"
    LOG_INFO "--Get transaction count of specified account located in specified block: \n\t./web3sdk eth_getTransactionCount address blockNumber\n"
    LOG_INFO "--Get total count of transactions located in specifed block: \n\t./web3sdk eth_getBlockTransactionCountByNumber blockNumber\n"
    LOG_INFO "--Send signed data to block-chain: \n\t./web3sdk eth_sendRawTransaction signTransactionData\n"
    LOG_INFO "--Get specified block according to block hash: \n\t./web3sdk eth_getBlockByHash blockHash true|false\n"
    LOG_INFO "--Get specified block according to block number: \n\t./web3sdk eth_getBlockByNumber blockNumber\n"
    LOG_INFO "--Get specified transaction according to block height and transaction position: \n\t./web3sdk eth_getTransactionByBlockNumberAndIndex blockNumber transactionPosition\n"
    LOG_INFO "--Get specified transaction according to block hash and transaction position: \n\t./web3sdk eth_getTransactionByBlockHashAndIndex blockHash transactionPosition\n"
    LOG_INFO "--Get transaction receipt according to transaction hash: \n\t./web3sdk eth_getTransactionReceipt transactionHash\n"
    LOG_INFO "\n"
    LOG_INFO "###### Permission Control API(please refer to https://fisco-bcos-test.readthedocs.io/zh/latest/docs/web3sdk/advanced/web3sdk_api.html)"
    LOG_INFO "--Deploy permission control contract: \n\t./web3sdk ARPI_Model\n"
    LOG_INFO "--Obtain permission information: \n\t./web3sdk PermissionInfo\n"
    LOG_INFO "--Add specified filter: \n\t./web3sdk FilterChain addFilter name1 version1 desc1\n"
    LOG_INFO "--Delete specified filter: \n\t./web3sdk FilterChain delFilter num\n"
    LOG_INFO "--Show all filters: \n\t./web3sdk FilterChain showFilter\n"
    LOG_INFO "--Reset all filters: \n\t./web3sdk FilterChain resetFilter\n"
    LOG_INFO "--Get status of specified filter: \n\t./web3sdk Filter getFilterStatus num\n"
    LOG_INFO "--Enable specified filter: \n\t./web3sdk Filter enableFilter num\n"
    LOG_INFO "--Disable specified filter: \n\t./web3sdk Filter disableFilter num\n"
    LOG_INFO "--Set specified account to specified group: \n\t./web3sdk Filter setUsertoNewGroup num account\n"
    LOG_INFO "--Add specified account to existed group: \n\t./web3sdk Filter setUsertoExistingGroup num account group\n"
    LOG_INFO "--Query group information of speicifed account: \n\t./web3sdk Filter listUserGroup num account\n"
    LOG_INFO "--Query whether specified account owned to specified group has been added to black-name list or not: \n\t./web3sdk Group getBlackStatus num account\n"
    LOG_INFO "--Add specified account to black-name list: \n\t./web3sdk Group enableBlack num account\n"
    LOG_INFO "--Remove specified account from black-name list: \n\t./web3sdk Group disableBlack num account\n"
    LOG_INFO "--Query whether specified account has permission to deploy contracts: \n\t./web3sdk Group getDeployStatus num account\n"
    LOG_INFO "--Enable the contract deployment permission for specified account: \n\t./web3sdk Group enableDeploy num account\n"
    LOG_INFO "--Remove the contract deployment permission for specified account: \n\t./web3sdk Group disableDeploy num account\n"
    LOG_INFO "--Add permission for specified account to callback function of specified contract: \n\t./web3sdk Group addPermission num account A.address fun(string)\n"
    LOG_INFO "--Remove permission for specified account to callback function of specified contract: \n\t./web3sdk Group delPermission num account A.address fun(string)\n"
    LOG_INFO "--Check whether specified account can callback specified function of specified contract: \n\t./web3sdk Group checkPermission num account A.address fun(string)\n"
    LOG_INFO "--List permissons of account owned to specified group: \n\t./web3sdk Group listPermission num account\n"
    LOG_INFO "\n"
    LOG_INFO "###### UTXO API"

    LOG_INFO "UTXO Command reference is as follows"
    LOG_INFO "--Init specified type tokens: \n\t./web3sdk InitTokens Type\n"
    LOG_INFO "--Send tokens: \n\t./web3sdk SendSelectedTokens Type\n"
    LOG_INFO "--Register Account: \n\t./web3sdk RegisterAccount Account\n"
    LOG_INFO "--Track token transferred records : \n\t./web3sdk TokenTracking TokenKey\n"
    LOG_INFO "--Get balance of specified account: \n\t./web3sdk GetBalance Account\n"
    LOG_INFO "--Select specified amount of token from specified account: \n\t./web3sdk SelectTokens Account Value\n"
    LOG_INFO "--Get token according to TokenKey: \n\t./web3sdk GetToken TokenKey\n"
    LOG_INFO "--Get UTXO transaction according to TxKey: \n\t./web3sdk GetTx TxKey\n"
    LOG_INFO "--Get value of specified token: \n\t./web3sdk GetVault Account TokenType\n"
}

#第一个参数不能为空
if [ $# -lt 1 ]; then
    Usage
    exit 1
fi

if [ "${1}" == "-h" ] || [ "${1}" == "--help" ] || [ "${1}" == "help" ];then
    Usage
    exit 0
fi

# Attempt to set APP_HOME
# Resolve links: $0 may be a link
PRG="$0"
# Need this for relative symlinks.
while [ -h "$PRG" ] ; do
    ls=`ls -ld "$PRG"`
    link=`expr "$ls" : '.*-> \(.*\)$'`
    if expr "$link" : '/.*' > /dev/null; then
        PRG="$link"
    else
        PRG=`dirname "$PRG"`"/$link"
    fi
done
SAVED="`pwd`"
cd "`dirname \"$PRG\"`/.." >/dev/null
APP_HOME="`pwd -P`"
cd "$SAVED" >/dev/null

APP_NAME="web3j"
APP_BASE_NAME=`basename "$0"`

# Add default JVM options here. You can also use JAVA_OPTS and WEB3J_OPTS to pass JVM options to this script.
DEFAULT_JVM_OPTS=""

# Use the maximum available, or set MAX_FD != -1 to use that value.
MAX_FD="maximum"

warn ( ) {
    LOG_INFO "$*"
}

die ( ) {
    LOG_INFO
    LOG_INFO "$*"
    LOG_INFO
    exit 1
}

# OS specific support (must be 'true' or 'false').
cygwin=false
msys=false
darwin=false
nonstop=false
case "`uname`" in
  CYGWIN* )
    cygwin=true
    ;;
  Darwin* )
    darwin=true
    ;;
  MINGW* )
    msys=true
    ;;
  NONSTOP* )
    nonstop=true
    ;;
esac

CLASSPATH=$APP_HOME/conf

for f in $APP_HOME/lib/*.jar
do 
CLASSPATH=$CLASSPATH:$f
done

for f in $APP_HOME/apps/*.jar
do 
CLASSPATH=$CLASSPATH:$f
done


# Determine the Java command to use to start the JVM.
if [ -n "$JAVA_HOME" ] ; then
    if [ -x "$JAVA_HOME/jre/sh/java" ] ; then
        # IBM's JDK on AIX uses strange locations for the executables
        JAVACMD="$JAVA_HOME/jre/sh/java"
    else
        JAVACMD="$JAVA_HOME/bin/java"
    fi
    if [ ! -x "$JAVACMD" ] ; then
        die "ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME

Please set the JAVA_HOME variable in your environment to match the
location of your Java installation."
    fi
else
    JAVACMD="java"
    which java >/dev/null 2>&1 || die "ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.

Please set the JAVA_HOME variable in your environment to match the
location of your Java installation."
fi

# Increase the maximum file descriptors if we can.
if [ "$cygwin" = "false" -a "$darwin" = "false" -a "$nonstop" = "false" ] ; then
    MAX_FD_LIMIT=`ulimit -H -n`
    if [ $? -eq 0 ] ; then
        if [ "$MAX_FD" = "maximum" -o "$MAX_FD" = "max" ] ; then
            MAX_FD="$MAX_FD_LIMIT"
        fi
        ulimit -n $MAX_FD
        if [ $? -ne 0 ] ; then
            warn "Could not set maximum file descriptor limit: $MAX_FD"
        fi
    else
        warn "Could not query maximum file descriptor limit: $MAX_FD_LIMIT"
    fi
fi

# For Darwin, add options to specify how the application appears in the dock
if $darwin; then
    GRADLE_OPTS="$GRADLE_OPTS \"-Xdock:name=$APP_NAME\" \"-Xdock:icon=$APP_HOME/media/gradle.icns\""
fi

# For Cygwin, switch paths to Windows format before running java
if $cygwin ; then
    APP_HOME=`cygpath --path --mixed "$APP_HOME"`
    CLASSPATH=`cygpath --path --mixed "$CLASSPATH"`
    JAVACMD=`cygpath --unix "$JAVACMD"`

    # We build the pattern for arguments to be converted via cygpath
    ROOTDIRSRAW=`find -L / -maxdepth 1 -mindepth 1 -type d 2>/dev/null`
    SEP=""
    for dir in $ROOTDIRSRAW ; do
        ROOTDIRS="$ROOTDIRS$SEP$dir"
        SEP="|"
    done
    OURCYGPATTERN="(^($ROOTDIRS))"
    # Add a user-defined pattern to the cygpath arguments
    if [ "$GRADLE_CYGPATTERN" != "" ] ; then
        OURCYGPATTERN="$OURCYGPATTERN|($GRADLE_CYGPATTERN)"
    fi
    # Now convert the arguments - kludge to limit ourselves to /bin/sh
    i=0
    for arg in "$@" ; do
        CHECK=`LOG_INFO "$arg"|egrep -c "$OURCYGPATTERN" -`
        CHECK2=`LOG_INFO "$arg"|egrep -c "^-"`                                 ### Determine if an option

        if [ $CHECK -ne 0 ] && [ $CHECK2 -eq 0 ] ; then                    ### Added a condition
            eval `LOG_INFO args$i`=`cygpath --path --ignore --mixed "$arg"`
        else
            eval `LOG_INFO args$i`="\"$arg\""
        fi
        i=$((i+1))
    done
    case $i in
        (0) set -- ;;
        (1) set -- "$args0" ;;
        (2) set -- "$args0" "$args1" ;;
        (3) set -- "$args0" "$args1" "$args2" ;;
        (4) set -- "$args0" "$args1" "$args2" "$args3" ;;
        (5) set -- "$args0" "$args1" "$args2" "$args3" "$args4" ;;
        (6) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" ;;
        (7) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" ;;
        (8) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" "$args7" ;;
        (9) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" "$args7" "$args8" ;;
    esac
fi

# Split up the JVM_OPTS And WEB3J_OPTS values into an array, following the shell quoting and substitution rules
function splitJvmOpts() {
    JVM_OPTS=("$@")
}
eval splitJvmOpts $DEFAULT_JVM_OPTS $JAVA_OPTS $WEB3J_OPTS

if [ $1 == "InitSystemContract" ] ; then
	exec "$JAVACMD" "${JVM_OPTS[@]}" -classpath "$CLASSPATH" org.bcos.contract.tools.InitSystemContract "$@"
	
elif [ $1 == "SystemProxy" -o $1 == "NodeAction" -o $1 == "CAAction" -o $1 == "ConfigAction" -o $1 == "ConsensusControl" -o $1 == "CNSAction" ] ; then
    command="$JAVACMD ${JVM_OPTS[@]} -classpath $CLASSPATH org.bcos.contract.tools.SystemContractTools $@"
    execute_cmd "${command}"
	
elif [ $1 == "eth_accounts" -o $1 == "web3_clientVersion" -o $1 == "eth_blockNumber" -o $1 == "eth_pbftView" -o $1 == "eth_getCode" -o $1 == "eth_getBlockTransactionCountByHash" -o $1 == "eth_getTransactionCount" -o $1 == "eth_getBlockTransactionCountByNumber" -o $1 == "eth_sendRawTransaction" -o $1 == "eth_getBlockByHash" -o $1 == "eth_getBlockByNumber" -o $1 == "eth_getTransactionByBlockNumberAndIndex" -o $1 == "eth_getTransactionByBlockHashAndIndex" -o $1 == "eth_getTransactionReceipt" ] ; then
	exec "$JAVACMD" "${JVM_OPTS[@]}" -classpath "$CLASSPATH" org.bcos.web3j.console.Web3RpcApi "$@"
	
elif [ $1 == "ARPI_Model" ] ; then
    exec "$JAVACMD" "${JVM_OPTS[@]}" -classpath "$CLASSPATH" org.bcos.contract.tools.ARPI_Model "$@"
    
elif [ $1 == "PermissionInfo" -o $1 == "FilterChain" -o $1 == "Filter" -o $1 == "Group" ] ; then
    exec "$JAVACMD" "${JVM_OPTS[@]}" -classpath "$CLASSPATH" org.bcos.contract.tools.AuthorityManager "$@" 

elif [ $1 == "InitTokens" -o $1 == "SendSelectedTokens" -o $1 == "RegisterAccount" -o $1 == "TokenTracking" -o $1 == "GetBalance" -o $1 == "SelectTokens" -o $1 == "GetToken" -o $1 == "GetTx" -o $1 == "GetVault" ] ; then
    exec "$JAVACMD" "${JVM_OPTS[@]}" -classpath "$CLASSPATH" org.bcos.contract.tools.UTXODemo "$@" 
	
else	
	exec "$JAVACMD" "${JVM_OPTS[@]}" -classpath "$CLASSPATH" org.bcos.web3j.console.Runner "$@"
fi	


